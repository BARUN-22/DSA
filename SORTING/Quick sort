class Solution {
    public int[] quickSort(int[] arr) {
        int n = arr.length;
        quicksort(arr, 0, n - 1);
        return arr;  
    }

    static void quicksort(int[] arr, int s, int e) {
        if (s >= e) {
            return;
        }
        int p = partition(arr, s, e);
        quicksort(arr, s, p - 1);
        quicksort(arr, p + 1, e);
    }

    public static int partition(int[] arr, int s, int e) {
        int pivot = arr[s];
        int count = 0;

        for (int i = s + 1; i <= e; i++) {
            if (arr[i] <= pivot) {
                count++;
            }
        }

        int pivotIndex = s + count;
        int temp = arr[s];
        arr[s] = arr[pivotIndex];
        arr[pivotIndex] = temp;

        int i = s;
        int j = e;

        while (i < pivotIndex && j > pivotIndex) {
            while (arr[i] <= pivot) {
                i++;
            }
            while (arr[j] > pivot) {
                j--;
            }
            if (i < pivotIndex && j > pivotIndex) {
                int temp1 = arr[i];
                arr[i] = arr[j];
                arr[j] = temp1;
                i++;
                j--;
            }
        }

        return pivotIndex;
    }
}
